scalar JSON
scalar DateTime
scalar URL

type TelemetryError{
	message: String
	code: String
}

type Query {
	temperatureCelsius(hiveId: ID!, timeRangeMin: Int): MetricListResult
	humidityPercent(hiveId: ID!, timeRangeMin: Int): MetricListResult
	weightKg(hiveId: ID!, timeRangeMin: Int): MetricListResult
	entranceMovementToday(hiveId: ID!, boxId: ID!): BeeMovementInOutResult
	entranceMovement(hiveId: ID!, boxId: ID!, timeFrom: DateTime!, timeTo: DateTime!): EntranceMovementResult
}

type BeeMovementInOutResult {
	beesIn: Float
	beesOut: Float
	netFlow: Float
	avgSpeed: Float
	p95Speed: Float
	stationaryBees: Int
	detectedBees: Int
	time: DateTime
}

type EntranceMovementRecord {
	id: ID!
	hiveId: ID!
	boxId: ID!
	beesOut: Float
	beesIn: Float
	time: DateTime!
	netFlow: Float
	avgSpeed: Float
	p95Speed: Float
	stationaryBees: Int
	detectedBees: Int
}

type EntranceMovementList {
	metrics: [EntranceMovementRecord]
}

union EntranceMovementResult = EntranceMovementList | TelemetryError

type MetricFloat {
	"""Timestamp of the metric. We use short-hand name to save bandwidth as it is a repeated metric"""
	t: DateTime!

	"""Float value of the metric. We use short-hand name to save bandwidth as it is a repeated metric"""
	v: Float
}

type MetricFloatList {
	metrics: [MetricFloat]
}
union MetricListResult = MetricFloatList | TelemetryError

type Mutation {
	addMetric(
		hiveId: ID!
		fields: MetricSetInput!
	): AddMetricResult
}

type AddMetricMessage {
	message: String
}

union AddMetricResult = AddMetricMessage | TelemetryError

input MetricSetInput {
	temperatureCelsius: Float
	humidityPercent: Float
	weightKg: Float
}
